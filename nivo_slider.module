<?php

/**
 * @file
 * Primarily Backdrop hooks.
 */

// Include the slider functions.
include_once('includes/nivo_slider_slider.inc');
      
/**
 * Implements hook_library_info().
 */
function nivo_slider_library_info() {
  $libraries['nivo-slider'] = array(
    'title' => 'Nivo Slider',
    'website' => 'http://nivo.dev7studios.com/pricing',
    'version' => '3.1',
    'js' => array(
      backdrop_get_path('module', 'nivo_slider') . '/js/nivo/jquery.nivo.slider.pack.js' => array(),
    ),
   'css' => array(
      backdrop_get_path('module', 'nivo_slider') . '/js/nivo/nivo-slider.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),  );

  return $libraries;
}

/**
 * Implements hook_config_info().
 */
function nivo_slider_config_info() {
  $prefixes['nivo_slider.settings'] = array(
    'label' => t('Nivo Slider settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_permission().
 */
function nivo_slider_permission() {
  return array(
    'administer nivo slider' => array(
      'title' => t('Administer Nivo Slides'),
      'description' => t('Allows a user to configure Nivo slides.'),
    ),
    'administer nivo slider options' => array(
      'title' => t('Administer Nivo Options'),
      'description' => t('Allows a user to configure global Nivo options.'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function nivo_slider_menu() {
  $items['admin/structure/nivo-slider'] = array(
    'title' => 'Nivo Sliders',
    'description' => 'Nivo Sliders.',
    'page callback' => 'nivo_slider_slider_list',
    'access callback' => TRUE,
    'access arguments' => array('administer nivo slider'),
  );
  $items['admin/structure/nivo-slider/%slider'] = array(
    'title' => 'Nivo Slider',
    'description' => 'Configure slider content and options.',
    'page callback' => 'backdrop_get_form',
    'access callback' => TRUE,
    'page arguments' => array('nivo_slider_slide_configuration_form', 3),
    'access arguments' => array('administer nivo slider'),
    'file' => 'nivo_slider_slides.admin.inc',
  );
  $items['admin/structure/nivo-slider/%slider/slides'] = array(
    'title' => 'Slides',
    'description' => 'Configure slider content.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('nivo_slider_slide_configuration_form', 3),
    'access callback' => TRUE,
    'access arguments' => array('administer nivo slider'),
    'file' => 'nivo_slider_slides.admin.inc',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/nivo-slider/%slider/options'] = array(
    'title' => 'Options',
    'description' => 'Configure slider options.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('nivo_slider_option_configuration_form', 3),
    'access arguments' => array('administer nivo slider'),
    'file' => 'nivo_slider_options.admin.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Loads a slider.
 */
function slider_load($slider_id) {
  $config = config('nivo_slider.settings');
  $slider = $config->get($slider_id);
  return $slider;
}

/**
 * Implements hook_menu_contextual_links_alter().
 */
function nivo_slider_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  if ($root_path == 'admin/structure/layouts/manage/%') {
    $uuid = $router_item['page_arguments'][3];
    $layout = $router_item['page_arguments'][1];
    $block = $layout->content[$uuid];
    if($block->module == 'nivo_slider'){
      $slider_id = $block->settings['block_settings']['slider_id'];
      $links['slider-edit'] = array(
        'title' => 'Edit Slides',
        'href' => 'admin/structure/nivo-slider/' . $slider_id . '/slides',
        'localized_options' => array(),
      );
      $links['ls-reorder'] = array(
        'title' => 'Edit Slider Options',
        'href' => 'admin/structure/nivo-slider/' . $slider_id . '/options',
        'localized_options' => array(),
      );
    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function nivo_slider_contextual_links_view_alter(&$element, &$items) {
  if (isset($element['#element']['#block']) && $element['#element']['#block']->delta == 'nivo_slider' && user_access('administer nivo slider')) {
    $element['#links']['slides'] = array(
      'title' => t('Configure slider slides'),
      'href' => 'admin/structure/nivo-slider/slides',
    );
    $element['#links']['options'] = array(
      'title' => t('Configure slider options'),
      'href' => 'admin/structure/nivo-slider/options',
    );
  }
}

/**
 * Implements hook_i18n_string_info()
 */
function nivo_slider_i18n_string_info() {
  $groups['nivo_slider'] = array(
    'title' => t('Nivo Slider'),
    'description' => t('Slide titles and descriptions.'),
    'format' => TRUE,
    'list' => FALSE,
    'refresh callback' => 'nivo_slider_locale_refresh',
  );

  return $groups;
}

/**
 * Returns default slide options.
 */
function nivo_slider_default_options() {
  return array(
  'effect' => 'random',
  'image_style' => 0,
  'image_style_slide' => 'large',
  'image_style_thumb' => 'thumbnail',
  'slices' => '15',
  'box_columns' => '8',
  'box_rows' => '4',
  'animation_speed' => '500',
  'pause_time' => '3000',
  'start_slide' => '0',
  'directional_navigation' => 1,
  'control_navigation' => 1,
  'control_nav_thumbs' => 0,
  'pause_on_hover' => 1,
  'manual_advance' => 0,
  'previous_text' => 'Prev',
  'next_text' => 'Next',
  'random_start' => 0,
  'theme' => 'default',
  'banner_settings' => array(),
  'banner_html_captions' => '',
  );
}

/**
 * Implements hook_i18n_string_refresh().
 */
function nivo_slider_i18n_string_refresh() {
  nivo_slider_locale_refresh();
  return true;
}

/**
 * Update / create translation source for user defined slide strings.
 *
 * @param $slides
 *   An array of slider slides.
 */
function nivo_slider_locale_refresh($slides = NULL) {
  if (!isset($slides)) {
    $slides = config_get('nivo_slider.settings', 'nivo_slider_banner_settings');
  }

  foreach ($slides as $slide => $settings) {
    foreach ($settings as $setting => $value) {
      switch ($setting) {
        case 'title':
          i18n_string_update('nivo_slider:slide:' . $slide . ':title', $value);
          break;
        case 'description':
          i18n_string_update('nivo_slider:slide:' . $slide . ':description', $value['value'], array('format' => $value['format']));
          break;
      }
    }
  }
}

/**
 * Translates a user defined slide string.
 *
 * @param $name
 *   Location glued with ':'.
 * @param $string
 *   String in default language. Default language may or may not be English.
 * @param $langcode
 *  The language code if it is different from the page request one.
 * @param $textgroup
 *  Textgroup.
 *
 * @return $string
 *   Translated string, $string if not found.
 */
function nivo_slider_translate($name, $string, $langcode = NULL, $textgroup = 'nivo_slider') {
  return function_exists('i18n_string') ? i18n_string($textgroup . ':' . $name, $string, array('langcode' => $langcode)) : $string;
}

/**
 * Implements hook_theme().
 */
function nivo_slider_theme($existing, $type, $theme, $path) {
  return array(
    'nivo_slider_slide_configuration_form' => array(
      'render element' => 'form',
      'file' => 'nivo_slider.theme.inc',
      'path' => $path . '/themes',
    ),
    'nivo_slider_wrapper' => array(
      'variables' => array(
        'theme' => NULL,
        'banners' => NULL,
        'value' => NULL,
        'slider_id' => NULL,
      ),
      'file' => 'nivo_slider.theme.inc',
      'path' => $path . '/themes',
      'template' => 'nivo-slider-wrapper',
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function nivo_slider_hook_info() {
  $hooks['nivo_slider_theme_info'] = array(
    'group' => 'nivo_slider',
  );
  $hooks['nivo_slider_theme_info_alter'] = array(
    'group' => 'nivo_slider',
  );

  return $hooks;
}

/**
 * Implements hook_block_info().
 */
function nivo_slider_block_info() {
  $blocks['nivo_slider'] = array(
    'info' => t('Nivo Slider'),
    'description' => t('Adds a Nivo image slider block.'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function nivo_slider_block_configure($delta = '', $settings = array()) {
  $form = array();
  if ($delta == 'nivo_slider') {
    $form['help'] = array(
      '#type' => 'help',
      '#markup' => t('After saving the layout, navigate to where this block displays (for example go to the home page, if you are adding the block to the Home layout), to edit the slide images.'),
    );
    $form['slider_name'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Slider Name'),
      '#description' => t('A unique name for this slider.'),
      '#default_value' => isset($settings['slider_name']) ? $settings['slider_name'] : '',
    );
    $form['slider_id'] = array(
      '#required' => TRUE,
      '#type' => 'machine_name',
      '#title' => t('Slider ID'),
      '#default_value' => isset($settings['slider_id']) ? $settings['slider_id'] : '',
      '#description' => t('A unique name for this slider. It must only contain lowercase letters, numbers and hyphens.'),
      '#machine_name' => array(
        'exists' => 'slider_load',
        'source' => array('block_settings', 'slider_name'),
      ),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function nivo_slider_block_save($delta, &$edit = array()) {
  if ($delta == 'nivo_slider') {
    $config = config('nivo_slider.settings');
    $data = $config->get($edit['slider_id']);
    $options = $data['options'];
    $slides = $data['slides'];
    $slider = array(
      'slider_id' => $edit['slider_id'],
      'slider_name' => $edit['slider_name'],
      'options' => empty($options) ? nivo_slider_default_options() : $options,
      'slides' => empty($slides) ? array() : $slides,
    );
    $config->set($edit['slider_id'], $slider);
    $config->save();
  }
}

/**
 * Implementation of hook_layout_update().
 *
 * Deletes unused slider settings. Sliders are added via the Layout builder, and 
 * their settings are saved in hook_block_save() to nivo_slider.settings.json.
 * When a block is removed from Layout builder, this checks for removed layout 
 * blocks to delete their settings.
 */
function nivo_slider_layout_update($layout) {
  $layouts = array();
  $config_names = config_get_names_with_prefix('layout.layout');
  foreach ($config_names as $config_file) {
    $config = config($config_file);
    $layout_data = $config->get();
    foreach($layout_data['content'] as $uuid => $block) {
      if($block['data']['module'] == 'nivo_slider') {
        $layouts[] = $block['data']['settings']['block_settings']['slider_id'];
      }
    }
  }
  $settings = config('nivo_slider.settings');
  $data = $settings->get();
  foreach($data as $key => $setting) {
    if(is_array($setting) && !in_array($key, $layouts)) {
      unset($data[$key]);
    }
  }
  $settings->setData($data);
  $settings->save();
}

/**
 * Implements hook_block_view().
 */
function nivo_slider_block_view($delta = '', $settings = array(), $contexts = array()) {
  $block = array();
  switch ($delta) {
    case 'nivo_slider':
      $config = config('nivo_slider.settings');
      $slider = $config->get($settings['slider_id']);
      if(!empty($slider['slides'])) {
        $block['content'] = array(
          '#type' => 'markup',
          '#theme' => 'nivo_slider_wrapper',
          '#value' => $slider['slides'],
          '#slider_id' => $slider['slider_id'],
          '#attached' => array(
            'library' => array(
              array('nivo_slider', 'nivo-slider'),
            ),
            'js' => array(
              array(
                'data' => backdrop_get_path('module', 'nivo_slider') . '/js/nivo_slider.js',
                'type' => 'file',
              ),
              array(
                'data' => array(
                  'sliderSettings' => array(
                    $slider['slider_id'] => array(
                      'effect' => $slider['options']['effect'],
                      'slices' => (int) $slider['options']['slices'],
                      'boxCols' => (int) $slider['options']['box_columns'],
                      'boxRows' => (int) $slider['options']['box_rows'],
                      'animSpeed' => (int) $slider['options']['animation_speed'],
                      'pauseTime' => (int) $slider['options']['pause_time'],
                      'startSlide' => (int) $slider['options']['start_slide'],
                      'directionNav' => $slider['options']['directional_navigation'] == 1 ? TRUE : FALSE,
                      'controlNav' => $slider['options']['control_navigation'] == 1 ? TRUE : FALSE,
                      'controlNavThumbs' => $slider['options']['control_nav_thumbs'] == 1 ? TRUE : FALSE,
                      'pauseOnHover' => $slider['options']['pause_on_hover'] == 1 ? TRUE : FALSE,
                      'manualAdvance' => $slider['options']['manual_advance'] == 1 ? TRUE : FALSE,
                      'prevText' => $slider['options']['previous_text'],
                      'nextText' => $slider['options']['next_text'],
                      'randomStart' => $slider['options']['random_start'] == 1 ? TRUE : FALSE,
                    ),
                  ),
                ),
                'type' => 'setting',
              ),
            ),
            'css' => array(),
          ),
        );

        // Collect all themes.
        $themes = module_invoke_all('nivo_slider_theme_info');
        // Allow theme information to be altered.
        backdrop_alter('nivo_slider_theme_info', $themes);

        // Find the currently-selected theme.
        $current_theme = $slider['options']['theme'];

        // Get the current theme's settings.
        $theme = $themes[$current_theme];

        // Add the theme's resources.
        foreach (array('js', 'css') as $type) {
          if (!empty($theme['resources'][$type])) {
            foreach ($theme['resources'][$type] as $file_path) {
              $block['content']['#attached'][$type][] = $file_path;
            }
          }
        }
      }
      else {
        $block['content'] = l('No slides yet. Add slides.', 'admin/structure/nivo-slider/' . $settings['slider_id'] . '/slides');
      }
      break;
  }

  return $block;
}

/**
 * Menu callback which shows an overview page of all the fanciblocks.
 */
function nivo_slider_slider_list() {
  $result = config_get('nivo_slider.settings');
  
  if($result) {
    $header = array(t('Slider'), 'data' => t('Operations'));
    $rows = array();
    foreach ($result as $slider_name => $slider) {
      if(is_array($slider)) {
        $links = array();

        $links['edit'] = array(
          'title' => t('Edit slides'),
          'href' => 'admin/structure/nivo-slider/' . $slider_name,
        );
        $links['options'] = array(
          'title' => t('Edit slider options'),
          'href' => 'admin/structure/nivo-slider/' . $slider_name . '/options',
        );

        $operations = array(
          '#type' => 'operations',
          '#links' => $links,
        );
        $row = array();
        $row[] = check_plain($slider['slider_name']);
        $row[] = array('data' => $operations);
        $rows[] = $row;
      }
    }
  }
  else {
    $header = array(t('Slider'), array('data' => t('Operations')));
    $rows = array();
    $rows[] = array(array('data' => t('There are no sliders yet.')));
  }
  $form['help'] = array(
    '#type' =>  'help',
    '#markup' => t('This table lists all existing slider blocks. New sliders can be created by adding a new Nivo Slider block in a !layout.', array('!layout' => l(t('layout'), 'admin/structure/layouts'))),
  );
  $form['table'] = array(
    '#markup' => theme('table', array('header' => $header, 'rows' => $rows)),
  );

  return $form;
}


/**
 * Implements hook_image_default_styles().
 */
function nivo_slider_image_default_styles() {
  $styles = array();
  $styles['nivo_slider'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 500,
          'upscale' => 1,
        ),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}
